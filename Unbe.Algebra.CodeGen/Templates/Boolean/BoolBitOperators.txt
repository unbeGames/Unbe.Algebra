
    #region Equality and Bit Operators

    /// <summary>Returns the result of a componentwise equality operation on two {0} vectors.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise equality.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise equality.</param>
    /// <returns>{0} result of the componentwise equality.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator == ({0} lhs, {0} rhs) {{ return new {0}({2}.Equals(lhs.value, rhs.value)); }}

    /// <summary>Returns the result of a componentwise equality operation on a {0} vector and a {1} value.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise equality.</param>
    /// <param name="rhs">Right hand side {1} to use to compute componentwise equality.</param>
    /// <returns>{0} result of the componentwise equality.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator == ({0} lhs, {1} rhs) {{ return new {0}({2}.Equals(lhs.value, new {0}(rhs).value)); }}

    /// <summary>Returns the result of a componentwise equality operation on a {1} value and a {0} vector.</summary>
    /// <param name="lhs">Left hand side {1} to use to compute componentwise equality.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise equality.</param>
    /// <returns>{0} result of the componentwise equality.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator == ({1} lhs, {0} rhs) {{ return new {0}({2}.Equals(new {0}(lhs).value, rhs.value)); }}


    /// <summary>Returns the result of a componentwise inequality operation on two {0} vectors.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise inequality.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise inequality.</param>
    /// <returns>{0} result of the componentwise inequality.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator != ({0} lhs, {0} rhs) {{ return new {0}(~{2}.Equals(lhs.value, rhs.value)); }}

    /// <summary>Returns the result of a componentwise inequality operation on a {0} vector and a {1} value.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise inequality.</param>
    /// <param name="rhs">Right hand side {1} to use to compute componentwise inequality.</param>
    /// <returns>{0} result of the componentwise inequality.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator != ({0} lhs, {1} rhs) {{ return new {0}(~{2}.Equals(lhs.value, new {0}(rhs).value)); }}

    /// <summary>Returns the result of a componentwise inequality operation on a {1} value and a {0} vector.</summary>
    /// <param name="lhs">Left hand side {1} to use to compute componentwise inequality.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise inequality.</param>
    /// <returns>{0} result of the componentwise inequality.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator != ({1} lhs, {0} rhs) {{ return new {0}(~{2}.Equals(new {0}(lhs).value, rhs.value)); }}



    /// <summary>Returns the result of a componentwise not operation on a bool4 vector.</summary>
    /// <param name="val">Value to use when computing the componentwise not.</param>
    /// <returns>bool4 result of the componentwise not.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator ! ({0} v) {{ return new {0}(~v.value); }}
    

    /// <summary>Returns the result of a componentwise bitwise and operation on two {0} vectors.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise bitwise and.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise bitwise and.</param>
    /// <returns>{0} result of the componentwise bitwise and.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator & ({0} lhs, {0} rhs) {{ return new {0}(lhs.value & rhs.value); }}

    /// <summary>Returns the result of a componentwise bitwise and operation on a {0} vector and a {1} value.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise bitwise and.</param>
    /// <param name="rhs">Right hand side {1} to use to compute componentwise bitwise and.</param>
    /// <returns>{0} result of the componentwise bitwise and.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator & ({0} lhs, {1} rhs) {{ return new {0}(lhs.value & new {0}(rhs).value); }}

    /// <summary>Returns the result of a componentwise bitwise and operation on a {1} value and a {0} vector.</summary>
    /// <param name="lhs">Left hand side {1} to use to compute componentwise bitwise and.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise bitwise and.</param>
    /// <returns>{0} result of the componentwise bitwise and.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator & ({1} lhs, {0} rhs) {{ return new {0}(new {0}(lhs).value & rhs.value); }}


    /// <summary>Returns the result of a componentwise bitwise or operation on two {0} vectors.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise bitwise or.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise bitwise or.</param>
    /// <returns>{0} result of the componentwise bitwise or.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator | ({0} lhs, {0} rhs) {{ return new {0}(lhs.value | rhs.value); }}

    /// <summary>Returns the result of a componentwise bitwise or operation on a {0} vector and a {1} value.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise bitwise or.</param>
    /// <param name="rhs">Right hand side {1} to use to compute componentwise bitwise or.</param>
    /// <returns>{0} result of the componentwise bitwise or.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator | ({0} lhs, {1} rhs) {{ return new {0}(lhs.value | new {0}(rhs).value); }}

    /// <summary>Returns the result of a componentwise bitwise or operation on a {1} value and a {0} vector.</summary>
    /// <param name="lhs">Left hand side {1} to use to compute componentwise bitwise or.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise bitwise or.</param>
    /// <returns>{0} result of the componentwise bitwise or.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator | ({1} lhs, {0} rhs) {{ return new {0}(new {0}(lhs).value | rhs.value); }}


    /// <summary>Returns the result of a componentwise bitwise exclusive or operation on two {0} vectors.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise bitwise exclusive or.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise bitwise exclusive or.</param>
    /// <returns>{0} result of the componentwise bitwise exclusive or.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator ^ ({0} lhs, {0} rhs) {{ return new {0}(lhs.value ^ rhs.value); }}

    /// <summary>Returns the result of a componentwise bitwise exclusive or operation on a {0} vector and a {1} value.</summary>
    /// <param name="lhs">Left hand side {0} to use to compute componentwise bitwise exclusive or.</param>
    /// <param name="rhs">Right hand side {1} to use to compute componentwise bitwise exclusive or.</param>
    /// <returns>{0} result of the componentwise bitwise exclusive or.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator ^ ({0} lhs, {1} rhs) {{ return new {0}(lhs.value ^ new {0}(rhs).value); }}
        
    /// <summary>Returns the result of a componentwise bitwise exclusive or operation on a {1} value and a {0} vector.</summary>
    /// <param name="lhs">Left hand side {1} to use to compute componentwise bitwise exclusive or.</param>
    /// <param name="rhs">Right hand side {0} to use to compute componentwise bitwise exclusive or.</param>
    /// <returns>{0} result of the componentwise bitwise exclusive or.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} operator ^ ({1} lhs, {0} rhs) {{ return new {0}(new {0}(lhs).value ^ rhs.value); }}
    
    #endregion
