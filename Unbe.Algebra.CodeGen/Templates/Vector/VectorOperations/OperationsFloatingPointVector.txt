		
		#region Vector Operations Floating Point

		/// <summary>Returns a normalized version of the vector v by scaling it by 1 / length(x).</summary>
    /// <param name="x">Vector to normalize.</param>
    /// <returns>The normalized vector.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} normalize({0} v) {{ return rsqrt(dot(v, v)) * v; }}

    /// <summary>
    /// Returns a safe normalized version of the {0} vector v by scaling it by 1 / length(v).
    /// Returns the given default value when 1 / length(v) does not produce a finite number.
    /// </summary>
    /// <param name="v">Vector to normalize.</param>
    /// <param name="defaultvalue">Vector to return if normalized vector is not finite.</param>
    /// <returns>The normalized vector or the default value if the normalized vector is not finite.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} normalizesafe({0} v, {0} defaultvalue = new {0}()) {{ 
      var len = dot(v, v);
      return select(defaultvalue, rsqrt(len) * v, len > FLT_MIN_NORMAL);
    }}

		/// <summary>Returns the length of a {0} vector.</summary>
		/// <param name="v">Vector to use when computing squared length.</param>
    /// <returns>Length of vector v.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {2} length({0} v) {{ return sqrt(dot(v, v)); }}

		/// <summary>Returns the squared length of a {0} vector.</summary>
    /// <param name="v">Vector to use when computing squared length.</param>
    /// <returns>Squared length of vector v.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {2} lengthsq({0} v) {{ return dot(v, v); }}

		/// <summary>Returns the distance between two {0} vectors.</summary>
    /// <param name="x">First vector to use in distance computation.</param>
    /// <param name="y">Second vector to use in distance computation.</param>
    /// <returns>The distance between x and y.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {2} distance({0} x, {0} y) {{ return length(y - x); }}

		/// <summary>Returns the squared distance between two {0} vectors.</summary>
    /// <param name="x">First vector to use in distance computation.</param>
    /// <param name="y">Second vector to use in distance computation.</param>
    /// <returns>The squared distance between x and y.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {2} distancesq({0} x, {0} y) {{ return lengthsq(y - x); }}

		/// <summary>Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t.</summary>
    /// <remarks>
    /// If the interpolation parameter is not in the range [0, 1], then this function extrapolates.
    /// </remarks>
    /// <param name="start">The start point, corresponding to the interpolation parameter value of 0.</param>
    /// <param name="end">The end point, corresponding to the interpolation parameter value of 1.</param>
    /// <param name="t">The interpolation parameter. May be a value outside the interval [0, 1].</param>
    /// <returns>The componentwise interpolation from x to y.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} lerp({0} start, {0} end, {2} t) {{ return start + t * (end - start); }}

		/// <summary>Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t.</summary>
    /// <remarks>
    /// If the interpolation parameter is not in the range [0, 1], then this function extrapolates.
    /// </remarks>
    /// <param name="start">The start point, corresponding to the interpolation parameter value of 0.</param>
    /// <param name="end">The end point, corresponding to the interpolation parameter value of 1.</param>
    /// <param name="t">The interpolation parameter. May be a value outside the interval [0, 1].</param>
    /// <returns>The componentwise interpolation from x to y.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} lerp({0} start, {0} end, {0} t) {{ return start + t * (end - start); }}

		/// <summary>Returns the componentwise result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a).</summary>
    /// <param name="start">The start point of the range.</param>
    /// <param name="end">The end point of the range.</param>
    /// <param name="x">The value to normalize to the range.</param>
    /// <returns>The componentwise interpolation parameter of x with respect to the input range [a, b].</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} unlerp({0} start, {0} end, {0} x) {{ return (x - start) / (end - start); }}

    /// <summary>Returns the result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd].</summary>
    /// <param name="srcStart">The start point of the source range [srcStart, srcEnd].</param>
    /// <param name="srcEnd">The end point of the source range [srcStart, srcEnd].</param>
    /// <param name="dstStart">The start point of the destination range [dstStart, dstEnd].</param>
    /// <param name="dstEnd">The end point of the destination range [dstStart, dstEnd].</param>
    /// <param name="x">The value to remap from the source to destination range.</param>
    /// <returns>The remap of input x from the source range to the destination range.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} remap({0} srcStart, {0} srcEnd, {0} dstStart, {0} dstEnd, {0} x) {{ return lerp(dstStart, dstEnd, unlerp(srcStart, srcEnd, x)); }}

		#endregion
