		
		#region Floating Point Math
		/// <summary>Returns the result of rounding each component of a vector value down to the nearest value less or equal to the original value.</summary>
    /// <param name="x">Input value.</param>
    /// <returns>The componentwise round down to nearest integral value of the input.</returns> 
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} floor({0} v) {{ return new {0}({1}.Floor(v.value)); }}

		/// <summary>Returns the result of rounding each component of a vector value up to the nearest value greater or equal to the original value.</summary>
    /// <param name="x">Input value.</param>
    /// <returns>The componentwise round up to nearest integral value of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} ceil({0} v) {{ return new {0}({1}.Ceiling(v.value)); }}

		/// <summary>Returns the result of rounding each component of a vector value to the nearest integral value.</summary>
    /// <param name="x">Input value.</param>
    /// <returns>The componentwise round to nearest integral value of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} round({0} v) {{ return new {0}({1}Ext.Round(v.value)); }}

	  /// <summary>Returns the resultof a componentwise conversion of vector v from radians to degrees.</summary>
    /// <param name="x">Angle in radians.</param>
    /// <returns>Angle converted to degrees.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} degrees({0} v) {{ return v * TO_DEGREES; }}

    /// <summary>Returns the result of a componentwise conversion of vector v from degrees to radians.</summary>
    /// <param name="x">Vector containing angles in degrees.</param>
    /// <returns>Vector containing angles converted to radians.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} radians({0} v) {{ return v * TO_RADIANS; }}

		/// <summary>Returns the componentwise result of raising x to the power y.</summary>
    /// <param name="x">The exponent base.</param>
    /// <param name="y">The exponent power.</param>
    /// <returns>The componentwise result of raising x to the power y.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} pow({0} x, {0} y) {{ return new {0}({1}Ext.Pow(x.value, y.value)); }}

		/// <summary>Returns the componentwise base-e exponential of v.</summary>
		/// <param name="v">Input value.</param>
    /// <returns>The base-e exponential of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} exp({0} v) {{ return new {0}({1}Ext.Exp(v.value)); }}

		/// <summary>Returns the componentwise base-2 exponential of v.</summary>
		/// <param name="v">Input value.</param>
    /// <returns>The base-2 exponential of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} exp2({0} v) {{ return new {0}({1}Ext.Exp2(v.value)); }}

		/// <summary>Returns the componentwise base-10 exponential of v.</summary>
		/// <param name="v">Input value.</param>
    /// <returns>The base-10 exponential of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} exp10({0} v) {{ return new {0}({1}Ext.Exp10(v.value)); }}

						
		/// <summary>Returns the componentwise natural logarithm of v.</summary>
    /// <param name="v">Input value.</param>
    /// <returns>The componentwise natural logarithm of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} log({0} v) {{ return new {0}({1}Ext.Log(v.value)); }}

		/// <summary>Returns the componentwise base-2 logarithm of v.</summary>
    /// <param name="v">Input value.</param>
    /// <returns>The componentwise base-2 logarithm of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} log2({0} v) {{ return new {0}({1}Ext.Log2(v.value)); }}

		/// <summary>Returns the componentwise base-10 logarithm of v.</summary>
    /// <param name="v">Input value.</param>
    /// <returns>The componentwise base-10 logarithm of the input.</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static {0} log10({0} v) {{ return new {0}({1}Ext.Log10(v.value)); }}
		#endregion
