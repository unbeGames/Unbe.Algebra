     
    /// <summary>Return the {0} transpose of a {0} matrix.</summary>
    /// <param name="m">Value to transpose.</param>
    /// <returns>Transposed value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} transpose({0} m) {{
      // x1, y1, x2, y2
      var xAndY1 = shuffle(m.c0, m.c1, Shuffle4.xyxy);

      // z1, w1, z2, w2
      var zAndW1 = shuffle(m.c0, m.c1, Shuffle4.zwzw);

      // x3, y3, x4, y4
      var xAndY2 = shuffle(m.c2, m.c3, Shuffle4.xyxy);

      // z3, w3, z4, w4
      var zAndW2 = shuffle(m.c2, m.c3, Shuffle4.zwzw);

      return new {0}(
        // x1, x2, x3, x4
        shuffle(xAndY1, xAndY2, Shuffle4.xzxz),
        // y1, y2, y3, y4
        shuffle(xAndY1, xAndY2, Shuffle4.ywyw),
        // z1, z2, z3, z4
        shuffle(zAndW1, zAndW2, Shuffle4.xzxz),
        // w1, w2, w3, w4
        shuffle(zAndW1, zAndW2, Shuffle4.ywyw)
      );
    }}

    /// <summary>Returns the {0} full inverse of a {0} matrix.</summary>
    /// <param name="m">Matrix to invert.</param>
    /// <returns>The inverted matrix.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} inverse({0} m) {{
      var c0 = m.c0;
      var c1 = m.c1;
      var c2 = m.c2;
      var c3 = m.c3;

      var r0y_r1y_r0x_r1x = shuffle(c1, c0, Shuffle4.xyxy);
      var r0z_r1z_r0w_r1w = shuffle(c2, c3, Shuffle4.xyxy);
      var r2y_r3y_r2x_r3x = shuffle(c1, c0, Shuffle4.zwzw);
      var r2z_r3z_r2w_r3w = shuffle(c2, c3, Shuffle4.zwzw);

      var r1y_r2y_r1x_r2x = shuffle(c1, c0, Shuffle4.yzyz);
      var r1z_r2z_r1w_r2w = shuffle(c2, c3, Shuffle4.yzyz);
      var r3y_r0y_r3x_r0x = shuffle(c1, c0, Shuffle4.wxwx);
      var r3z_r0z_r3w_r0w = shuffle(c2, c3, Shuffle4.wxwx);

      var r0_wzyx = shuffle(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x, Shuffle4.zxxz);
      var r1_wzyx = shuffle(r0z_r1z_r0w_r1w, r0y_r1y_r0x_r1x, Shuffle4.wyyw);
      var r2_wzyx = shuffle(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x, Shuffle4.zxxz);
      var r3_wzyx = shuffle(r2z_r3z_r2w_r3w, r2y_r3y_r2x_r3x, Shuffle4.wyyw);
      var r0_xyzw = shuffle(r0y_r1y_r0x_r1x, r0z_r1z_r0w_r1w, Shuffle4.zxxz);

      // Calculate remaining inner term pairs. inner terms have zw=-xy, so we only have to calculate xy and can pack two pairs per vector.
      var inner12_23 = r1y_r2y_r1x_r2x * r2z_r3z_r2w_r3w - r1z_r2z_r1w_r2w * r2y_r3y_r2x_r3x;
      var inner02_13 = r0y_r1y_r0x_r1x * r2z_r3z_r2w_r3w - r0z_r1z_r0w_r1w * r2y_r3y_r2x_r3x;
      var inner30_01 = r3z_r0z_r3w_r0w * r0y_r1y_r0x_r1x - r3y_r0y_r3x_r0x * r0z_r1z_r0w_r1w;

      // Expand inner terms back to 4 components. zw signs still need to be flipped
      var inner12 = shuffle(inner12_23, inner12_23, Shuffle4.xzzx);
      var inner23 = shuffle(inner12_23, inner12_23, Shuffle4.ywwy);

      var inner02 = shuffle(inner02_13, inner02_13, Shuffle4.xzzx);
      var inner13 = shuffle(inner02_13, inner02_13, Shuffle4.ywwy);

      // Calculate minors
      var minors0 = r3_wzyx * inner12 - r2_wzyx * inner13 + r1_wzyx * inner23;

      var denom = r0_xyzw * minors0;

      // Horizontal sum of denominator. Free sign flip of z and w compensates for missing flip in inner terms.
      denom = denom + shuffle(denom, denom, Shuffle4.yxwz);   // x+y        x+y            z+w            z+w
      denom = denom - shuffle(denom, denom, Shuffle4.zzxx);   // x+y-z-w  x+y-z-w        z+w-x-y        z+w-x-y

      var rcp_denom_ppnn = new {1}(1.0f) / denom;
      var res = new {0}();
      res.c0 = minors0 * rcp_denom_ppnn;

      var inner30 = shuffle(inner30_01, inner30_01, Shuffle4.xzzx);
      var inner01 = shuffle(inner30_01, inner30_01, Shuffle4.ywwy);

      var minors1 = r2_wzyx * inner30 - r0_wzyx * inner23 - r3_wzyx * inner02;
      res.c1 = minors1 * rcp_denom_ppnn;

      var minors2 = r0_wzyx * inner13 - r1_wzyx * inner30 - r3_wzyx * inner01;
      res.c2 = minors2 * rcp_denom_ppnn;

      var minors3 = r1_wzyx * inner02 - r0_wzyx * inner12 + r2_wzyx * inner01;
      res.c3 = minors3 * rcp_denom_ppnn;
      return res;
    }}
