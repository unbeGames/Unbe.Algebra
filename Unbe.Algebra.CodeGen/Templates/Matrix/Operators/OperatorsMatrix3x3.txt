     
    /// <summary>Return the {0} transpose of a {0} matrix.</summary>
    /// <param name="m">Value to transpose.</param>
    /// <returns>Transposed value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} transpose({0} m) {{
      return new {0}(
        m.c0.x, m.c0.y, m.c0.z,
        m.c1.x, m.c1.y, m.c1.z,
        m.c2.x, m.c2.y, m.c2.z
      );
    }}

    /// <summary>Returns the {0} full inverse of a {0} matrix.</summary>
    /// <param name="m">Matrix to invert.</param>
    /// <returns>The inverted matrix.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {0} inverse({0} m) {{
      var c0 = m.c0;
      var c1 = m.c1;
      var c2 = m.c2;

      var t0 = new {1}(c1.x, c2.x, c0.x);
      var t1 = new {1}(c1.y, c2.y, c0.y);
      var t2 = new {1}(c1.z, c2.z, c0.z);

      var m0 = t1 * t2.yzx - t1.yzx * t2;
      var m1 = t0.yzx * t2 - t0 * t2.yzx;
      var m2 = t0 * t1.yzx - t0.yzx * t1;

      float rcpDet = 1.0f / csum(t0.zxy * m0);
      return new {0}(m0, m1, m2) * rcpDet;
    }}
